{"version":3,"sources":["containers/Footer.js","containers/LeftBody.js","components/LoginCard.js","containers/RightBody.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["footerStyle","text-align","display","Footer","react_default","a","createElement","style","Component","images","backgroundImage","concat","backgroundSize","width","height","imageStyle","position","marginLeft","marginTop","dummyTopStyle","LeftBody","src","cardStyle","align-items","logoStyle","signUpStyle","color","text-algin","margin","font-size","font-weight","line-height","formStyle","LoginCard","Card","Button","className","mdbreact_esm","label","size","type","RightBody","LoginCard_LoginCard","bodyStyle","margin-top","justify-content","App","react_responsive_default","query","LeftBody_LeftBody","RightBody_RightBody","Footer_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"mLAGMA,eAAe,CACnBC,aAAc,SACdC,QAAW,cAEQC,mLAEjB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,KAAGC,MAAUP,GAAb,oFAJ4BQ,aCF9BC,EAAS,CACb,uFACA,wFAEIF,EAAQ,CACZG,gBAAA,OAAAC,OAPyB,oFAOzB,KACAC,eAAkB,eAClBC,MAAO,IACPC,OAAQ,KAEJC,EAAa,CACjBC,SAAY,WACZH,MAAO,IACPC,OAAQ,IACRG,WAAY,IACZC,UAAW,IAEPC,EAAgB,CACpBN,MAAO,KAQYO,mLAEjB,OACEhB,EAAAC,EAAAC,cAAA,OAAKC,MAAOA,GACZH,EAAAC,EAAAC,cAAA,OAAKC,MAAOY,IACVf,EAAAC,EAAAC,cAAA,OAAKe,IAAKZ,EAAO,GAAIF,MAAOQ,IAC5BX,EAAAC,EAAAC,cAAA,OAAKe,IAAKZ,EAAO,GAAIF,MAAOQ,YANEP,uCC3BhCc,EAAY,CACdT,MAAO,QACPC,OAAQ,QACRZ,QAAW,OACXqB,cAAe,UAGbC,EAAY,CACdX,MAAS,QACTC,OAAU,QAGRW,EAAc,CAChBC,MAAO,OACPC,aAAc,SACdC,OAAU,cACVC,YAAa,OACbC,cAAe,QACfC,cAAe,QAGbC,EAAY,CACdnB,MAAS,OAEQoB,mLAEb,OACI7B,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAM3B,MAAOe,GACTlB,EAAAC,EAAAC,cAAA,OAAKe,IAvBT,6GAuBuBd,MAAOiB,IAC1BpB,EAAAC,EAAAC,cAAA,KAAGC,MAAOkB,GAAV,uDAGArB,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,6BACA/B,EAAAC,EAAAC,cAAA,OAAK8B,UAAU,aAAa7B,MAASyB,GACjC5B,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAUC,MAAM,yBAAyBC,KAAK,OAC9CnC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAUC,MAAM,YAAYC,KAAK,OACjCnC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAUC,MAAM,YAAYC,KAAK,OACjCnC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAUC,MAAM,WAAWE,KAAK,WAAWD,KAAK,QAEpDnC,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,gBACA/B,EAAAC,EAAAC,cAAA,KAAGC,MAAOkB,GAAV,qFAjBmBjB,aCzBlBiC,mLAEjB,OACErC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACoC,EAAD,cAJ+BlC,8BCQjCmC,wBAAY,CAChBC,aAAc,OACd1C,QAAW,OACX2C,kBAAmB,iBAkBNC,mLAdX,OACE1C,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OAAKC,MAASoC,GACdvC,EAAAC,EAAAC,cAACyC,EAAA1C,EAAD,CAAY2C,MAAM,sBAChB5C,EAAAC,EAAAC,cAAC2C,EAAD,OAEA7C,EAAAC,EAAAC,cAAC4C,EAAD,OAEJ9C,EAAAC,EAAAC,cAAC6C,EAAD,cAVY3C,aCJE4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,6FEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.d48eb435.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\n\nconst footerStyle =  {\n  'text-align': 'center',\n  'display': 'list-item',\n}\nexport default class Footer extends Component {\n  render() {\n    return (\n      <div>\n        <a style = { footerStyle }>\n          ABOUT USSUPPORTPRESSAPIJOBSPRIVACYTERMSDIRECTORYPROFILESHASHTAGSLANGUAGE\n        </a>\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\n\n\nconst mockDeviceImageUrl = \"https://www.instagram.com/static/images/homepage/home-phones.png/43cc71bb1b43.png\"\n\nconst images = [\n  \"https://www.instagram.com/static/images/homepage/screenshot2-2x.jpg/177140221987.jpg\",\n  \"https://www.instagram.com/static/images/homepage/screenshot1-2x.jpg/9144d6673849.jpg\"\n]\nconst style = {\n  'backgroundImage': `url(${mockDeviceImageUrl})`,\n  'backgroundSize': '454px 618px;',\n  width: 453,\n  height: 618,\n}\nconst imageStyle = {\n  'position': 'absolute',\n  width: 240,\n  height: 417,\n  marginLeft: 151,\n  marginTop: 99,\n}\nconst dummyTopStyle = {\n  width: 304,\n}\n\nconst imageDivStyle = {\n  top: 80,\n  left: 120,\n}\n\nexport default class LeftBody extends Component {\n  render() {\n    return (\n      <div style={style}>\n      <div style={dummyTopStyle} />\n        <img src={images[0]} style={imageStyle} />\n        <img src={images[1]} style={imageStyle} />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react'\nimport { Card, Button, Form } from 'react-bootstrap';\nimport { MDBInput } from \"mdbreact\";\n\nconst cardStyle = {\n    width: '350px',\n    height: '564px',\n    'display': 'flex',\n    'align-items': 'center',\n}\nconst logoUrl = \"https://upload.wikimedia.org/wikipedia/commons/thumb/2/2a/Instagram_logo.svg/1200px-Instagram_logo.svg.png\"\nconst logoStyle = {\n    'width': '175px',\n    'height': '51px',\n}\n\nconst signUpStyle = {\n    color: '#999',\n    'text-algin': 'center',\n    'margin': '0 40px 10px',\n    'font-size': '17px',\n    'font-weight': '600px',\n    'line-height': '20px',\n}\n\nconst formStyle = {\n    'width': '80%'\n}\nexport default class LoginCard extends Component {\n    render() {\n        return (\n            <div>\n                <Card style={cardStyle}>\n                    <img src={logoUrl} style={logoStyle} />\n                    <a style={signUpStyle}>\n                        Sign up to see photos and videos from your friends.\n                    </a>\n                    <Button>Log in with facebook</Button>\n                    <div className=\"form-group\" style = {formStyle}>\n                        <MDBInput label=\"Mobile Number or Email\" size=\"sm\" />\n                        <MDBInput label=\"Full Name\" size=\"sm\" />\n                        <MDBInput label=\"User Name\" size=\"sm\" />\n                        <MDBInput label=\"Password\" type=\"password\" size=\"sm\" />\n                    </div>\n                    <Button>Sign up</Button>\n                    <a style={signUpStyle}>\n                    By signing up, you agree to our Terms , Data Policy and Cookies Policy .\n                    </a>\n                </Card>\n\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport LoginCard from '../components/LoginCard';\n\nexport default class RightBody extends Component {\n  render() {\n    return (\n      <div>\n        <LoginCard />\n      </div>\n    )\n  }\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Footer from './containers/Footer';\nimport LeftBody from './containers/LeftBody';\nimport RightBody from './containers/RightBody';\nimport MediaQuery from 'react-responsive';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\n\nconst bodyStyle = {\n  'margin-top': '40px',\n  'display': 'flex',\n  'justify-content': 'space-around'\n}\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <div style = {bodyStyle}>\n        <MediaQuery query=\"(min-width: 880px)\">\n          <LeftBody />\n        </MediaQuery>\n          <RightBody />\n        </div>\n      <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}